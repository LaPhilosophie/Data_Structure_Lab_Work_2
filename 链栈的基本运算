/*
编写一个程序，实现链栈的各种基本运算，并在此基础上设计一个主程序完成如下功能：
（1）初始化栈s；
（2）判断栈s是否为空；
（3）依次进栈元素10,-2,10,-3,15,12；10 2 3 15 12
（4）判断栈s是否为空；
（5）输出栈长度；
（6）输出从栈顶到栈底的元素；
（7）输出出栈序列；
（8）判断栈s是否为空。
*/
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define OK 1
#define ERROR -1
typedef struct StackNode
{
    int data;
    struct StackNode *next;
}StackNode,*LinkStack;
typedef int Status;
Status InitStack(LinkStack &S)
{
    S=NULL;
    return OK;
}
Status Push(LinkStack &S,int e)
{
    LinkStack p;
    p=new StackNode;
    p->data=e;
    p->next=S;
    S=p;
    return OK;
}
Status Pop(LinkStack &S,int &e)
{
    if(S==NULL)
        return ERROR;
    LinkStack p;
    e=S->data;
    p=S;
    S=S->next;
    delete p;
    return OK;
}
int GetHead(LinkStack S)
{
    if(S!=NULL)
        return S->data;
}
void IsEmpty(LinkStack S)
{
    if(S==NULL)
        cout<<"栈为空"<<endl;
    else
        cout<<"栈不为空"<<endl;
}
int StackLength(LinkStack S)
{
    int j=0;
    LinkStack p;
    p=S;
    while(p)
        {
            j++;
            p=p->next;
        }
    return j;
}
void CreatStack(LinkStack &S)
{
    for(int i=0;i<5;i++)
    {
        int e;
        cin>>e;
        Push(S,e);
    }
}
void Traverse(LinkStack S)
{
    if(S==NULL)
        return ;
    else
    {
        cout<<S->data<<" ";
        Traverse(S->next);
    }
}
void PopAll(LinkStack &S)
{
    int e;
    while(S!=NULL)
    {
        Pop(S,e);
        cout<<e<<" ";
    }
    cout<<endl;
}
int main()
{
    LinkStack S;
    InitStack(S);

    cout<<"初始化栈完成"<<endl;

    cout<<"判断栈是否为空"<<endl;
    IsEmpty(S);

    cout<<"请输入进栈元素"<<endl;
    CreatStack(S);

    cout<<"判断栈是否为空"<<endl;
    IsEmpty(S);

    cout<<"栈的长度为"<<endl;
    cout<<StackLength(S)<<endl;

    cout<<"输出从栈顶到栈底的元素"<<endl;
    Traverse(S);
    cout<<endl;

    cout<<"输出出栈序列"<<endl;
    PopAll(S);

    cout<<"判断栈是否为空"<<endl;
    IsEmpty(S);

    return 0;
}
